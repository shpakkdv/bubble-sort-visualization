{"version":3,"sources":["utils/bubbleSort.ts","utils/createRandomArray.ts","components/NumericInput/index.tsx","components/ArrayVisualization/index.tsx","components/Controls/index.tsx","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["bubbleSort","array","i","length","j","biggerNumber","getRandomInteger","min","max","minInt","Math","ceil","maxInt","floor","random","createRandomArray","arrayValueRange","arrayLengthRange","Array","from","map","NumericInput","onChange","id","value","label","disabled","range","step","integer","useState","currentValue","setCurrentValue","useEffect","onValueChanged","useCallback","event","originalValue","target","Number","isFinite","onBlur","numericValue","parseInt","String","newValue","onKeyDown","key","className","type","htmlFor","ArrayVisualization","width","setWidth","maxHeight","setHeight","ratio","number","index","style","height","VisualizationControls","Controls","isSorted","arrayGenerator","arrayValuesRange","setArrayGenerator","setArrayValuesRange","setArrayLengthRange","setArray","intervalId","setIntervalId","interval","changeInterval","reset","next","start","window","setInterval","done","clearInterval","undefined","pause","isAutoSorting","onClick","App","toString","sort","a","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18aee69c.chunk.js","sourcesContent":["export function* bubbleSort(array: number[]): Generator<number[], number[], void> {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                const biggerNumber = array[j];\n                array[j] = array[j + 1]\n                array[j + 1] = biggerNumber;\n                yield [...array];\n            }\n        }\n    }\n\n    return [...array];\n}\n","/**\n * Returns random integer from min (including) to max (including)\n */\nfunction getRandomInteger(min: number, max: number): number {\n    const minInt = Math.ceil(min);\n    const maxInt = Math.floor(max);\n    return Math.floor(Math.random() * (maxInt - minInt + 1)) + minInt;\n}\n\nexport function createRandomArray(\n    arrayValueRange: [number, number],\n    arrayLengthRange: [number, number],\n): number[] {\n    return Array\n        .from({ length: getRandomInteger(...arrayLengthRange) })\n        .map(() => getRandomInteger(...arrayValueRange));\n}\n","import React, { useCallback, useState, useEffect } from 'react';\n\nimport './NumericInput.css';\n\ninterface NumericInputProps {\n  id: string;\n  value: number | '';\n  label?: string;\n  disabled?: boolean;\n  onChange: (value: number) => void\n  range: readonly [number, number];\n  step?: number;\n  integer?: boolean;\n}\n\nexport const NumericInput: React.FC<NumericInputProps> = ({\n  onChange,\n  id,\n  value,\n  label,\n  disabled,\n  range: [min, max],\n  step = 1,\n  integer = true,\n}) => {\n  const [currentValue, setCurrentValue] = useState(value);\n  useEffect(() => {\n    setCurrentValue(value);\n  }, [value]);\n\n  const onValueChanged = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      const originalValue = event.target.value;\n      if (originalValue === '') {\n        setCurrentValue(originalValue);\n        return;\n      }\n\n      const value = Number(originalValue);\n\n      if (isFinite(value)) {\n        setCurrentValue(value);\n      }\n    },\n    [setCurrentValue],\n  );\n\n  const onBlur = useCallback<React.FocusEventHandler<HTMLInputElement>>(() => {\n    if (currentValue === '') {\n      setCurrentValue(value);\n\n      return;\n    }\n\n    const numericValue = integer ? parseInt(String(currentValue)) : Number(currentValue);\n    const newValue = Math.min(max, Math.max(numericValue, min));\n\n    if (newValue !== value) {\n      setCurrentValue(value);\n      onChange(newValue);\n    }\n  }, [currentValue, integer, min, max, value, onChange]);\n\n  const onKeyDown = useCallback<React.KeyboardEventHandler<HTMLInputElement>>((event) => {\n    if (event.key === 'Enter') {\n      onBlur(event as any);\n    }\n  }, [onBlur]);\n\n\n  return (\n    <div className=\"NumericInput\">\n      <input\n        className=\"input\"\n        type=\"number\"\n        id={id}\n        min={min}\n        max={max}\n        step={step}\n        disabled={disabled}\n        value={currentValue}\n        onChange={onValueChanged}\n        onBlur={onBlur}\n        onKeyDown={onKeyDown}\n      />\n      {label && <label className=\"label\" htmlFor={id}>{`${label} (${min} - ${max})`}</label>}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nimport { NumericInput } from '../NumericInput';\n\nimport './ArrayVisualization.css';\n\n\ninterface ArrayVisualizationProps {\n  array: number[];\n}\n\nexport const ArrayVisualization: React.FC<ArrayVisualizationProps> = ({ array }) => {\n  const [width, setWidth] = useState(20);\n  const [maxHeight, setHeight] = useState(400);\n  const ratio = maxHeight / Math.max(...array);\n\n  return (\n    <>\n      <div className=\"ArrayVisualization\">\n        {array.map((number, index) => (\n          <div\n            key={index}\n            className=\"numberColumn\"\n            style={{ width, height: ratio * number }}\n          />\n        ))}\n      </div>\n      <VisualizationControls\n        width={width}\n        setWidth={setWidth}\n        maxHeight={maxHeight}\n        setHeight={setHeight}\n      />\n    </>\n  );\n}\n\ninterface VisualizationControlsProps {\n  width: number;\n  setWidth: (width: number) => void;\n  maxHeight: number;\n  setHeight: (height: number) => void;\n}\n\nexport const VisualizationControls: React.FC<VisualizationControlsProps> = ({\n  width,\n  setWidth,\n  maxHeight,\n  setHeight,\n}) => {\n  return (\n    <div className=\"VisualizationControls\">\n      <NumericInput\n          id=\"max-height\"\n          label=\"Max height (px)\"\n          value={maxHeight}\n          onChange={setHeight}\n          range={[10, 1000]}\n      />\n      <NumericInput\n          id=\"width\"\n          label=\"Width (px)\"\n          value={width}\n          onChange={setWidth}\n          range={[5, 400]}\n      />\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { bubbleSort } from '../../utils/bubbleSort';\nimport { createRandomArray } from '../../utils/createRandomArray';\nimport { NumericInput } from '../NumericInput';\n\nimport './Controls.css';\n\ninterface ControlsProps {\n  isSorted: boolean;\n\n  arrayGenerator: Generator<number[], number[]>;\n  arrayValuesRange: [number, number];\n  arrayLengthRange: [number, number];\n\n  setArrayValuesRange: (valuesRange: [number, number]) => void;\n  setArrayLengthRange: (lengthRange: [number, number]) => void;\n  setArrayGenerator: (arrayGenerator: Generator<number[], number[]>) => void;\n  setArray: (array: number[]) => void;\n}\n\nexport const Controls: React.FC<ControlsProps> = ({\n  isSorted,\n  \n  arrayGenerator,\n  arrayValuesRange,\n  arrayLengthRange,\n\n  setArrayValuesRange,\n  setArrayLengthRange,\n  setArrayGenerator,\n  setArray,\n}) => {\n  const [intervalId, setIntervalId] = useState<number>();\n  const [interval, changeInterval] = useState(50);\n\n  const reset = useCallback(() => {\n    const arrayGenerator = bubbleSort(createRandomArray(arrayValuesRange, arrayLengthRange));\n    setArrayGenerator(arrayGenerator);\n    setArray(arrayGenerator.next().value);\n  }, [arrayLengthRange, arrayValuesRange, setArray, setArrayGenerator]);\n\n  const next = useCallback(() => {\n    setArray(arrayGenerator.next().value);\n  }, [arrayGenerator, setArray]);\n\n  const start = useCallback(() => {\n    const id = window.setInterval(() => {\n      const { done, value } = arrayGenerator.next();\n\n      if (done) {\n        window.clearInterval(intervalId);\n        setIntervalId(undefined);\n      } else {\n        setArray(value);\n      }\n    }, interval);\n\n    setIntervalId(id);\n  }, [arrayGenerator, interval, intervalId, setArray]);\n\n  const pause = useCallback(() => {\n    window.clearInterval(intervalId);\n    setIntervalId(undefined);\n  }, [intervalId]);\n\n  const isAutoSorting = !!intervalId;\n\n  return (\n    <div className=\"Controls\">\n      <div className=\"buttons\">\n        <button onClick={reset} disabled={isAutoSorting}>Reset</button>\n        <button onClick={next} disabled={isSorted || isAutoSorting}>Next Movement</button>\n        {isAutoSorting\n          ? <button onClick={pause} disabled={isSorted}>Pause auto-sorting</button>\n          : <button onClick={start} disabled={isSorted}>Start auto-sorting</button>\n        }\n      </div>\n      <div>\n        <NumericInput\n          id=\"interval\"\n          label=\"Interval (ms)\"\n          value={interval}\n          onChange={changeInterval}\n          range={[10, 5000]}\n          disabled={isAutoSorting}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { bubbleSort } from '../../utils/bubbleSort';\nimport { createRandomArray } from '../../utils/createRandomArray';\n\nimport { ArrayVisualization } from '../ArrayVisualization';\nimport { Controls } from '../Controls';\n\nimport './App.css';\n\nexport const App: React.FC = () => {\n  const [arrayValuesRange, setArrayValuesRange] = useState<[number, number]>([1, 100]);\n  const [arrayLengthRange, setArrayLengthRange] = useState<[number, number]>([20, 30]);\n  const [arrayGenerator, setArrayGenerator] = useState(() => bubbleSort(createRandomArray(arrayValuesRange, arrayLengthRange)));\n  const [array, setArray] = useState(() => arrayGenerator.next().value);\n\n  const isSorted = array.toString() === [...array].sort((a, b) => a - b).toString();\n\n  return (\n    <div>\n      <header className=\"header\">\n        Bubble Sort Visualization 🧼\n      </header>\n      <ArrayVisualization array={array} />\n      <Controls\n        isSorted={isSorted}\n\n        arrayGenerator={arrayGenerator}\n        arrayValuesRange={arrayValuesRange}\n        arrayLengthRange={arrayLengthRange}\n\n        setArrayValuesRange={setArrayValuesRange}\n        setArrayLengthRange={setArrayLengthRange}\n        setArrayGenerator={setArrayGenerator}\n        setArray={setArray}\n      />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}